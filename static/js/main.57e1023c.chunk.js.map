{"version":3,"sources":["nav.js","Searcher.js","Movie.js","MovieList.js","Pagination.js","Movieinfo.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","href","id","onClick","values","keys","Object","localStorage","i","length","push","getItem","console","log","allStorage","Searcher","action","onSubmit","handleSubmit","placeholder","type","onChange","handleChange","Movie","words","fecha","release_date","undefined","split","class","image","src","alt","style","width","height","size","title","viewMovieInfo","movieId","MovieList","movies","map","movie","key","poster_path","Pagination","pageLinks","active","currentPage","nextPage","pages","MovieInfo","closeMovieInfo","cursor","paddingTop","marginLeft","currentMovie","overview","vote_count","popularity","vote_average","setItem","JSON","stringify","save_as","App","e","preventDefault","fetch","state","searchTerm","then","data","json","setState","results","totalResults","total_results","target","value","pageNumber","filteredMovie","filter","newCurrentMovie","currentFav","numberPages","Math","floor","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57e1023c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './stylepage.css';\r\n\r\n\r\n\r\n function allStorage() {\r\n\r\n    var values = [],\r\n        keys = Object.keys(localStorage),\r\n        i = keys.length;\r\n\r\n    while ( i-- ) {\r\n        values.push( localStorage.getItem(keys[i]) );\r\n    }\r\n\r\n    console.log(values);\r\n}\r\n\r\nconst Nav = (props) => {\r\n\treturn(\r\n\t\t<nav className=\"nav-extended\">\r\n\t\t\t<div className = \"nav-wrapper\">\r\n\t\t\t\t<a href=\"https://imceballos.github.io/react-app-movie/\" className=\"brand-logo\" ><i className=\"material-icons\"></i>  Movie finder </a>\r\n\t\t\t\t<ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n\t\t\t\t\t<li><a href=\"/favoritos\" onClick= {() => allStorage() } > Favoritos </a></li>\r\n      \t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</nav>\r\n\t\t)\r\n}\r\nexport default Nav;\r\n","import React from 'react';\r\n\r\nconst Searcher = (props) => {\r\n\treturn (\r\n\r\n\t\t<div className = \"container\">\r\n\t\t\t<div className = \"row\">\r\n\t\t\t\t<section className=\"col s4 offset-s4\">\r\n\t\t\t\t\t<form action=\"\" onSubmit ={props.handleSubmit}>\r\n\t\t\t\t\t\t<div className=\"input-field\">\r\n\t\t\t\t\t\t\t<input placeholder=\"Search\" type=\"text\" onChange={props.handleChange}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</section>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t)\r\n\r\n}\r\n\r\nexport default Searcher;","import React from 'react'\r\nimport './stylo.css'\r\n\r\nconst Movie = (props) => {\r\n\r\n\tvar words = ' '\r\n\r\n\tconst fecha = props.release_date ;\r\n\tif (fecha !== undefined ){\r\n\t\twords =  fecha.split('-')[0] ;\r\n\t\r\n\t}\r\n\telse {\r\n\t\t words = \" \"\r\n\t}\r\n\t\r\n\r\n\treturn (\r\n\t\t<div className=\"col s12 m6 l3\">\r\n\t\t\t<div class=\"card\">\r\n\t\t\t\t<div className= \"card-image waves-effect waves-block waves-light\">\r\n\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\tprops.image == null ? <img src={\"https://s3-ap-southeast-1.amazonaws.com/upcode/static/default-image.jpg\"} alt=\"card image\" style={{width:\"100%\", height:250}} /> : <img src={\"https://image.tmdb.org/t/p/w185\"+props.image } alt=\"card image\" style={{width:\"100%\", height:250}} />\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t</div>\t\r\n\t\t\t\t<div className=\"card-content\" >\r\n\t\t\t\t\t<div className=\"info\">\r\n\t\t\t\t\t\t<p><font size=\"2\"> { props.title } ( {words} )  </font> <a href=\"/#\" onClick={() => props.viewMovieInfo(props.movieId)}> Detalles </a> </p>\r\n\t\t\t\t\t</div>\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nexport default Movie;","import React from 'react';\r\nimport Movie from './Movie.js'\r\n\r\nconst MovieList = (props) => {\r\n\treturn(\t<div className=\"container\">\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col s12\">\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tprops.movies.map((movie,i) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<Movie key={i} image={movie.poster_path} title={movie.title} release_date={movie.release_date} viewMovieInfo = {props.viewMovieInfo} movieId = {movie.id}/>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t)\r\n\t\r\n\r\n}\r\nexport default MovieList;","import React from 'react';\r\n\r\nconst Pagination = (props) => {\r\n\tconst pageLinks = [ ]\r\n\r\n\tfor(let i = 1; i <= props.pages +1; i++){\r\n\t\tlet active = props.currentPage === i ? 'active' : '';\r\n\t\tpageLinks.push(<li className={'waves-effect '+ active} key={i}\tonClick={() => props.nextPage(i)} > <a href=\"/#\">{i} </a> </li>)\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<ul className=\"pagination\">\r\n\t\t\t\t\t{pageLinks}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\nexport default Pagination;\r\n","import React from 'react'\r\nimport './stylepage.css'\r\n\r\nfunction save_as(props){\r\n\r\n\tlocalStorage.setItem(props.currentMovie.id, JSON.stringify(props.currentMovie))\r\n\r\n\t}\r\n\r\n\r\n\r\nconst MovieInfo = (props) => {\r\n\t\r\n\r\n\treturn (\r\n\t\t<div className = \"container\">\r\n\t\t\t<div className = \"row\" onClick={props.closeMovieInfo} style={{cursor : \"pointer\", paddingTop : 50}}>\r\n\t\t\t\t<i className = \"fas fa-arrow-left\"> </i>\r\n\t\t\t\t<span style={{marginLeft: 10}} > Go back </span>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col s12 m4\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprops.currentMovie.poster_path == null ? <img src= {\"https://s3-ap-southeast-1.amazonaws.com/upcode/static/default-image.jpg\"} alt=\"Card image\" style = {{width : \"100%\" , height :360}} /> :\r\n\r\n\t\t\t\t\t\t<img src={\"https://image.tmdb.org/t/p/w185\"+props.currentMovie.poster_path}  alt=\"Card image\" style = {{width : \"100%\" , height :360}} />\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col s12 m8\">\r\n\t\t\t\t\t\t<div className=\"info-container\">\r\n\t\t\t\t\t\t\t<p> {props.currentMovie.title} </p>\r\n\t\t\t\t\t\t\t<p> {props.currentMovie.release_date}</p>\r\n\t\t\t\t\t\t\t<p> {props.currentMovie.overview} </p>\r\n\t\t\t\t\t\t\t<p>\tVotos : {props.currentMovie.vote_count}</p>\r\n\t\t\t\t\t\t\t<p>\tPopularidad : {props.currentMovie.popularity}</p>\r\n\t\t\t\t\t\t\t<p>\tNota: {props.currentMovie.vote_average}</p>\r\n\t\t\t\t\t\t\t<a href=\"/#\" onClick={() => save_as(props)}> Añadir a favoritos </a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</div>\r\n\r\n\t\t)\r\n}\r\n\r\nexport default MovieInfo;\r\n","import React, {Component} from 'react';\nimport Nav from './nav.js';\nimport Searcher from './Searcher.js';\nimport MovieList from './MovieList.js'\nimport Pagination from './Pagination.js'\nimport MovieInfo from './Movieinfo.js'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      movies : [],\n      searchTerm: '',\n      totalResults: 0,\n      currentPage: 1 ,\n      currentMovie: null,\n      currentFav: 1,\n    }\n\n  }\n  \n\n   \n  handleSubmit = (e) => {\n    e.preventDefault();\n    fetch(\"https://api.themoviedb.org/3/search/movie?api_key=ec016b5cd8b9c91c9af4952ca4be84bd&query=\"+this.state.searchTerm)\n    .then(data => data.json())\n    .then(data => {\n      console.log(data);\n      this.setState({ movies: [...data.results] , totalResults : data.total_results})\n    })\n\n  }  \n\n  handleChange = (e) => {\n    this.setState({searchTerm : e.target.value })  \n  } \n\n  nextPage = (pageNumber) => {\n    fetch(\"https://api.themoviedb.org/3/search/movie?api_key=ec016b5cd8b9c91c9af4952ca4be84bd&query=\"+this.state.searchTerm+\"&page=\"+pageNumber)\n    .then(data => data.json())\n    .then(data => {\n      console.log(data);\n      this.setState({ movies: [...data.results] , currentPage : pageNumber})\n    })\n\n  }\n\n \n  viewMovieInfo = (id) => {\n    const filteredMovie = this.state.movies.filter(movie => movie.id === id)\n    const newCurrentMovie = filteredMovie.length > 0 ? filteredMovie[0] : null \n    this.setState({currentMovie : newCurrentMovie}) \n\n  }\n  closeMovieInfo = () => {\n    this.setState({currentMovie: null})\n  }\n\n  render() {\n\n    const numberPages = Math.floor( this.state.totalResults /20);\n  \n  return (\n    <div>\n      <div className=\"App\">\n        <Nav />\n         { this.state.currentMovie == null ?   <div> <Searcher handleSubmit = {this.handleSubmit}  handleChange = {this.handleChange} />   < MovieList viewMovieInfo = {this.viewMovieInfo}  movies = {this.state.movies}  /> </div> :\n         < MovieInfo  currentMovie = { this.state.currentMovie }  closeMovieInfo = { this.closeMovieInfo } /> }\n         { this.state.totalResults > 20  && this.state.currentMovie == null? < Pagination pages = {numberPages}  nextPage = {this.nextPage}  currentPage={this.state.currentPage} /> :'' }  \n         { this.state.currentFav == null ?    ' ' : '' }\n      </div>       \n    </div>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}